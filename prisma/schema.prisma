// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teamsAccounts TeamsAccount[]
}

model TeamsAccount {
    id           String   @id @default(cuid())
    userId       String
    email        String
    displayName  String
    accessToken  String
    refreshToken String
    tokenExpiry  DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, email])
}

model MeetingTranscript {
    id                String   @id @default(cuid())
    transcriptId      String   @unique
    meetingId         String
    organizerId       String
    subject           String?
    startTime         DateTime
    endTime           DateTime?
    content           String?  // Store the full transcript text
    participants      Json?    // Store participant info as JSON
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    meeting           TeamsMeeting? @relation(fields: [meetingId], references: [id])

    @@unique([meetingId, transcriptId])
}

model TeamsMeeting {
    id           String   @id @default(cuid())
    meetingId    String   @unique
    subject      String?
    organizerId  String
    startTime    DateTime
    endTime      DateTime?
    joinWebUrl   String?
    participants Json?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    transcripts  MeetingTranscript[]
}